#include "PolyFormerFW_menu.h"
#include "TMCStepper.h"           // TMCstepper - https://github.com/teemuatlut/TMCStepper
const char pgmCommittedToRom[] PROGMEM = "Saved to ROM";

//Hardware Variables
#define baudrate               9600
#define REFERENCE_RESISTANCE   4700
#define NOMINAL_RESISTANCE     100000
#define NOMINAL_TEMPERATURE    25
#define B_VALUE                3950

//System Variables
int error = 0; //Start with a clean sheet and no error /* 0=no error; 1=Heater decoupled during rising; 2=Heater decoupled during hold; 10=Over Temp; 11=Thermistor short; 12=No thermistor */
bool runSystem = false;

//BlackPill
//#define SDAPin          PB9
//#define SCLPin          PB8
//#define stepperStepPin  PB0
//#define stepperDirPin   PB7
//#define stepperEnPin    PB5
//#define thermistorPin  PA2
//#define meltzoneFanPin  PA6


////EBB42 v1.1
#define SDAPin          PB4
#define SCLPin          PB3
#define stepperEnPin    PD2
#define thermistorPin   PA3
#define meltzoneFanPin  PA0
#define encA            PB5
#define encB            PB7
#define encSW           PB6


void setup() {
  // If you use i2c and serial devices, be sure to start wire / serial.
  Wire.setSDA(SDAPin); //BlackPill
  Wire.setSCL(SCLPin); //BlackPill
  Wire.begin();

  // This is added by tcMenu Designer automatically during the first setup.
  setupMenu();

  // lastly we load state from EEPROM.
  menuMgr.load();
  serialSetup();
  stepperSetup();
  fanSetup();
}

void loop() {
  taskManager.runLoop();
  SerialLoop();
  fanLoop();
}


void CALLBACK_FUNCTION onSaveSettings(int id) {
  menuMgr.save();

  // here is a brief example of how to show a dialog, usually for information
  // or yes/no answers.
  auto* dlg = renderer.getDialog();
  if (dlg && !dlg->isInUse()) {
    dlg->setButtons(BTNTYPE_NONE, BTNTYPE_OK);
    dlg->show(pgmCommittedToRom, false);
    dlg->copyIntoBuffer("just so you know");
  }
}

void CALLBACK_FUNCTION onPIDTune(int id) {
  // TODO - your menu change code
}

void CALLBACK_FUNCTION onStart(int id) {
  runSystem = !runSystem;
  stepperSppeed();
}

void CALLBACK_FUNCTION onGearboxChange(int id) {
  // TODO - your menu change code
  Serial.print("MotorSteps");
  Serial.println(menuSettingsMotorSteps.getAsFloatingPointValue());
  Serial.print("GearboxRatio");
  Serial.println(menuSettingsGearboxRatio.getAsFloatingPointValue());
  Serial.print("SpoolRadius");
  Serial.println(menuSettingsSpoolRadius.getAsFloatingPointValue());
  stepperSppeed();

  //  SettingsGearboxMicrosteps2();
  //  uint16_t currentValue = menuSettingsGearboxMicrosteps2();.getCurrentValue()



}


void CALLBACK_FUNCTION onNameChanged(int id) {
  // TODO - your menu change code
}



void CALLBACK_FUNCTION onMotorCurrent(int id) {
  stepperCurrent();
}
