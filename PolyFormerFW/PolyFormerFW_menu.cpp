/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "PolyFormerFW_menu.h"
#include "ThemeMonoBordered.h"

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "  PolyFormer", "fddaa423-cb5c-4024-8f67-a9742f4457f3" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
U8G2_SSD1306_128X64_NONAME_F_HW_I2C gfx(U8G2_R2, U8X8_PIN_NONE, U8X8_PIN_NONE, U8X8_PIN_NONE);
U8g2Drawable gfxDrawable(&gfx, &Wire);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const AnalogMenuInfo minfoSettingsD = { "Kd", 20, 33, 10000, NO_CALLBACK, 0, 100, "" };
AnalogMenuItem menuSettingsD(&minfoSettingsD, 0, NULL);
const AnalogMenuInfo minfoSettingsI = { "Ki", 19, 31, 10000, NO_CALLBACK, 0, 100, "" };
AnalogMenuItem menuSettingsI(&minfoSettingsI, 0, &menuSettingsD);
const AnalogMenuInfo minfoSettingsP = { "Kp", 18, 29, 10000, NO_CALLBACK, 0, 100, "" };
AnalogMenuItem menuSettingsP(&minfoSettingsP, 0, &menuSettingsI);
const AnyMenuInfo minfoSettingsPIDTune = { "PIDTune", 21, 0xffff, 0, onPIDTune };
ActionMenuItem menuSettingsPIDTune(&minfoSettingsPIDTune, &menuSettingsP);
const AnyMenuInfo minfoSettingsSaveSettings = { "SaveSettings", 9, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSettingsSaveSettings(&minfoSettingsSaveSettings, &menuSettingsPIDTune);
const AnalogMenuInfo minfoSettingsMotorCurrent = { "MotorCurrent", 16, 0xffff, 1500, NO_CALLBACK, 500, 1, "mA" };
AnalogMenuItem menuSettingsMotorCurrent(&minfoSettingsMotorCurrent, 0, &menuSettingsSaveSettings);
const AnalogMenuInfo minfoSettingsMicrosteps = { "Microsteps", 15, 27, 63, NO_CALLBACK, 1, 1, "" };
AnalogMenuItem menuSettingsMicrosteps(&minfoSettingsMicrosteps, 0, &menuSettingsMotorCurrent);
const AnalogMenuInfo minfoSettingsSpoolRadius = { "SpoolRadius", 14, 25, 450, NO_CALLBACK, 50, 1, "mm" };
AnalogMenuItem menuSettingsSpoolRadius(&minfoSettingsSpoolRadius, 0, &menuSettingsMicrosteps);
const AnalogMenuInfo minfoSettingsGearboxRatio = { "GearboxRatio", 13, 23, 99, NO_CALLBACK, 1, 1, "to1" };
AnalogMenuItem menuSettingsGearboxRatio(&minfoSettingsGearboxRatio, 0, &menuSettingsSpoolRadius);
const AnalogMenuInfo minfoSettingsMotorSteps = { "MotorSteps", 12, 21, 396, NO_CALLBACK, 4, 1, "" };
AnalogMenuItem menuSettingsMotorSteps(&minfoSettingsMotorSteps, 0, &menuSettingsGearboxRatio);
const AnalogMenuInfo minfoSettingsSerialNumber2 = { "Serial Number2", 11, 8, 999, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuSettingsSerialNumber2(&minfoSettingsSerialNumber2, 0, &menuSettingsMotorSteps);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsSerialNumberRtCall, largeNumItemRenderFn, "Serial Number", 7, NO_CALLBACK)
EditableLargeNumberMenuItem menuSettingsSerialNumber(fnSettingsSerialNumberRtCall, 8, 4, 0, false, &menuSettingsSerialNumber2);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsUserNameRtCall, textItemRenderFn, "User Name", 16, onNameChanged)
TextMenuItem menuSettingsUserName(fnSettingsUserNameRtCall, 7, 5, &menuSettingsSerialNumber);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const SubMenuInfo minfoSettings = { "Settings", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsUserName);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, NULL);
const AnalogMenuInfo minfoFan = { "Fan", 10, 3, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuFan(&minfoFan, 0, &menuSettings);
const AnalogMenuInfo minfoActualTemp = { "Actual Temp", 17, 0xffff, 300, NO_CALLBACK, 0, 1, "C" };
AnalogMenuItem menuActualTemp(&minfoActualTemp, 0, &menuFan);
const AnalogMenuInfo minfoTemperature = { "Setpoint", 1, 2, 150, NO_CALLBACK, 100, 1, "C" };
AnalogMenuItem menuTemperature(&minfoTemperature, 0, &menuActualTemp);
const AnalogMenuInfo minfoFeed = { "Feed", 2, 1, 255, NO_CALLBACK, 0, 1, "mm s" };
AnalogMenuItem menuFeed(&minfoFeed, 0, &menuTemperature);
const AnyMenuInfo minfoStart = { "Start", 4, 0xffff, 0, onStart };
ActionMenuItem menuStart(&minfoStart, &menuFeed);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Now add any readonly, non-remote and visible flags.
    menuActualTemp.setReadOnly(true);

    // Code generated by plugins.
    gfx.begin();
    renderer.setUpdatesPerSecond(10);
    switches.init(internalDigitalIo(), SWITCHES_NO_POLLING, true);
    menuMgr.initForEncoder(&renderer, &menuStart, PB13, PB14, PB12);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(false);
    installMonoBorderedTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(u8g2_font_finderskeepers_tf, 1), true);
}

