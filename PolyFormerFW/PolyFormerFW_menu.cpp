/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "PolyFormerFW_menu.h"
#include "ThemeMonoBordered.h"

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "PolyFormer", "fddaa423-cb5c-4024-8f67-a9742f4457f3" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
U8G2_SSD1306_128X64_NONAME_F_HW_I2C gfx(U8G2_R2, U8X8_PIN_NONE, U8X8_PIN_NONE, U8X8_PIN_NONE);
U8g2Drawable gfxDrawable(&gfx, &Wire);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const AnyMenuInfo minfoSettingsSaveSettings = { "SaveSettings", 20, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSettingsSaveSettings(&minfoSettingsSaveSettings, NULL);
const AnalogMenuInfo minfoKd = { "Kd", 19, 34, 65535, onPIDChange, 0, 10, "" };
AnalogMenuItem menuKd(&minfoKd, 0, NULL);
const AnalogMenuInfo minfoKi = { "Ki", 18, 32, 65535, onPIDChange, 0, 10, "" };
AnalogMenuItem menuKi(&minfoKi, 0, &menuKd);
const AnalogMenuInfo minfoKp = { "Kp", 17, 30, 65535, onPIDChange, 0, 10, "" };
AnalogMenuItem menuKp(&minfoKp, 0, &menuKi);
const AnyMenuInfo minfoPIDTune = { "PIDTune", 16, 0xffff, 0, onPIDTune };
ActionMenuItem menuPIDTune(&minfoPIDTune, &menuKp);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsTemperatureRtCall, backSubItemRenderFn, "Temperature", -1, NO_CALLBACK)
const SubMenuInfo minfoSettingsTemperature = { "Temperature", 15, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettingsTemperature(fnSettingsTemperatureRtCall, &menuPIDTune);
SubMenuItem menuSettingsTemperature(&minfoSettingsTemperature, &menuBackSettingsTemperature, &menuSettingsSaveSettings);
const AnalogMenuInfo minfoSerialNumber = { "Serial Number", 23, 28, 999, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuSerialNumber(&minfoSerialNumber, 0, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnUserNameRtCall, textItemRenderFn, "User Name", 18, onNameChanged)
TextMenuItem menuUserName(fnUserNameRtCall, 22, 10, &menuSerialNumber);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsPersonalisationRtCall, backSubItemRenderFn, "Personalisation", -1, NO_CALLBACK)
const SubMenuInfo minfoSettingsPersonalisation = { "Personalisation", 21, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettingsPersonalisation(fnSettingsPersonalisationRtCall, &menuUserName);
SubMenuItem menuSettingsPersonalisation(&minfoSettingsPersonalisation, &menuBackSettingsPersonalisation, &menuSettingsTemperature);
const AnalogMenuInfo minfoMotorCurrent = { "MotorCurrent", 14, 16, 1500, NO_CALLBACK, 500, 1, "mA" };
AnalogMenuItem menuMotorCurrent(&minfoMotorCurrent, 0, NULL);
const AnalogMenuInfo minfoMicrosteps = { "Microsteps", 13, 14, 63, onGearboxChange, 1, 1, "" };
AnalogMenuItem menuMicrosteps(&minfoMicrosteps, 0, &menuMotorCurrent);
const AnalogMenuInfo minfoSpoolRadius = { "SpoolRadius", 12, 12, 450, onGearboxChange, 50, 1, "mm" };
AnalogMenuItem menuSpoolRadius(&minfoSpoolRadius, 0, &menuMicrosteps);
const AnalogMenuInfo minfoGearboxRatio = { "GearboxRatio", 11, 10, 99, onGearboxChange, 1, 1, "to1" };
AnalogMenuItem menuGearboxRatio(&minfoGearboxRatio, 0, &menuSpoolRadius);
const AnalogMenuInfo minfoMotorSteps = { "MotorSteps", 10, 8, 396, onGearboxChange, 4, 1, "" };
AnalogMenuItem menuMotorSteps(&minfoMotorSteps, 0, &menuGearboxRatio);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsGearboxRtCall, backSubItemRenderFn, "Gearbox", -1, NO_CALLBACK)
const SubMenuInfo minfoSettingsGearbox = { "Gearbox", 9, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettingsGearbox(fnSettingsGearboxRtCall, &menuMotorSteps);
SubMenuItem menuSettingsGearbox(&minfoSettingsGearbox, &menuBackSettingsGearbox, &menuSettingsPersonalisation);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const SubMenuInfo minfoSettings = { "Settings", 6, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsGearbox);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, NULL);
const AnalogMenuInfo minfoFeed = { "Feed", 2, 2, 149, onGearboxChange, 1, 10, "mm s" };
AnalogMenuItem menuFeed(&minfoFeed, 0, &menuSettings);
const AnalogMenuInfo minfoFan = { "Fan", 5, 6, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuFan(&minfoFan, 0, &menuFeed);
const AnalogMenuInfo minfoTemperature = { "Setpoint", 3, 4, 150, NO_CALLBACK, 100, 1, "C" };
AnalogMenuItem menuTemperature(&minfoTemperature, 0, &menuFan);
const FloatMenuInfo minfoActualTemp = { "Actual Temp", 24, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuActualTemp(&minfoActualTemp, &menuTemperature);
const AnyMenuInfo minfoStart = { "Start", 1, 0xffff, 0, onStart };
ActionMenuItem menuStart(&minfoStart, &menuActualTemp);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Now add any readonly, non-remote and visible flags.
    menuActualTemp.setReadOnly(true);

    // Code generated by plugins.
    gfx.begin();
    renderer.setUpdatesPerSecond(10);
    switches.init(internalDigitalIo(), SWITCHES_NO_POLLING, true);
    menuMgr.initForEncoder(&renderer, &menuStart, PB13, PB14, PB12);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(false);
    installMonoBorderedTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(u8g2_font_finderskeepers_tf, 1), true);
}

